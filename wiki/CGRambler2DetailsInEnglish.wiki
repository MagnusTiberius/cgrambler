#labels CGRambler,SCNU,HaiQuanLi
=About the official page:=
http://code.google.com/p/cgrambler/ is the official page of CGRambler2.0, you can download the newest source code and screenshots of this project from that site. Please comment this project at the bottom of this page, so that I can reply.


=Brief Introduction to CGRambler2.0:=
CGRambler2.0 is a DirectX 10 based rendering engine, for the previous version of CGRambler1.0,please see http://user.qzone.qq.com/499482794/blog/1285834895
Compare with CGrambler1.0, CGRambler2.0 have been designed from the very beginning. It will focus on the architecture of the engine itself, not the gorgeous shaders. In addition, this project is completely open source, you can use it for commercial or non-commercial without permission.


= Configuration:=
You need windows 7, with the newest DirectX 10 SDK installed. Compile the DXUT first, then add the include and lib directories of DirectX SDK and DXUT to visual studio C++. Copy the fxc.exe in Utilities to Windows/System32/. If you compile in Debug mode, visual memory leak in needed, you can also remove it.


=About the author:=
South China Normal University, Grade 2008, HaiQuan Li, cgrambler@gmail.com


---------------------------------------------------------------------------------------------------------------


=Class Diagram=
[http://img1.ph.126.net/uo4GMkUHf6y-ZLwEVaMWqg==/3181511661762413508.jpg]


-------------------------------------------------------------------------------------------------------------------


=Module 1 FX Composer SAS Based Shader Loader=
Finished time 2011/2/14

FX Composer is one of the best Shader IDEs, it has powerful SAS. which SAS, developers can develop shaders without writing C++. The functions of this Module is to bind variables, update variables, load resources(e.g textures), control rendering process. With the help of this Module, loading shaders can be very easy.
For example, to build the scene as the picture Phong_Shadowed_Glow showed below, you just need to write those code.


void InitCGRambler()
{
	g_pSceneManager=SceneManager::getSingleton();
	g_pSceneManager->init( DXUTGetD3D10Device());

	g_pCamera=g_pSceneManager->getCamera();
	g_pCamera->setPosition(D3DXVECTOR4(1.356086f,0.049764f,-9.334431f,1.0f));
	g_pCamera->setLookAt(D3DXVECTOR4(1.13701f,0.069804,-8.358729,1.0f));

	LightPtr light=g_pSceneManager->createLight("SpotLight",D3DXVECTOR4(10.0f,10.0f,-9.0f,0.0f),D3DXVECTOR4(0.0f,0.0f,0.0f,0.0f), D3DXVECTOR4(1.0f,1.0f,1.0f,1.0f),30.0f,2.0f);

	EffectPtr pEffect=g_pSceneManager->createEffect("effectName","PhongShadowed.fx");
	EffectPtr pGlow=g_pSceneManager->createEffect("glow","Glow.fx");

	MeshPtr pMesh=g_pSceneManager->createMesh("meshName","goof_knight.sdkmesh","");
	pMesh->setSize(D3DXVECTOR4(10.0f,10.0f,10.0f,10.0f));
	pMesh->setDirection(D3DXVECTOR4(-0.8f,0.0f,-1.0f,1.0f));
	pMesh->setPosition(D3DXVECTOR4(0.0f,0.05f,0.0f,1.0f));

	MeshPtr pFloor=g_pSceneManager->createMesh("floor","seafloor.sdkmesh","");
	pFloor->setSize(D3DXVECTOR4(0.3f,0.3f,0.3f,0.3f));

	pEffect->addMesh(pMesh);
	pEffect->addMesh(pFloor);

	pGlow->addMesh(pMesh);
	pGlow->addMesh(pFloor);
}


=New_Shaders_InFXC=
[http://img764.ph.126.net/syLssQA-o3hi1rSzFXC59A==/1245526771945386828.jpg]


= Gooch_Bump_Reflect_InFXC=
[http://img692.ph.126.net/XKaRRwgl53WzRG6noWETrQ==/2883429661425156089.jpg]


=Phong_Shadowed_InFXC=
[http://img764.ph.126.net/V_VjH-Iz-GqmHLCHiuQHBQ==/1245526771945386842.jpg]


=Phong_Shadowed_Glow_InFXC=
[http://img775.ph.126.net/a12-s48E-KhdgaL02sycEg==/4844184349190786611.jpg]


=Gooch_Bump_Reflect_InCGRambler2.0=
[http://img229.ph.126.net/fVMXpvs5uEmRrhVcKutHXA==/1461981029036716455.jpg]


=Phong_Shadowed_InCGRambler2.0=
[http://img685.ph.126.net/JqKSeq48rsIrRDaBCTxDbg==/2797298318551807002.jpg]


=Phong_Shadowed_Glow_InCGRambler2.0=
[http://img849.ph.126.net/uYcWeInJjDr-8aLBsEyMkA==/2695967326935761404.jpg]


=<font color=#FF0000> Please comment this project at the bottom of this page, so that I can reply.</font>=